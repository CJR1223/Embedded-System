2 modes privileged and non privileged

in privileged mode can write and read from Current Program Status Register
in non privileged mode processor cannot write into CPSR reg

only read can be possible no write operations are possible


ARM7 Register set     
-----------------   
General purpose register

* Total 37 registers are available
   each register is 4 bytes
* in that total 16 registers are available in USR mode
* remaining 21 registers are available in other modes 
  The 21 registers are called as Banked registers

List of USR mode registers
--------------------------

R0       ---
R1
R2
R3
R4
R5              General purpose registers 
R6
R7
R8
R9
R10
R11
R12     ---
R13 (stack pointer)
R14 (link register)
R15 (Program counter)    


STACK POINTER
-------------
stack pointer always point to stack .stack is a part of RAM.

two operations are possible on any stack
.push  -> inserting data into stack
.pop   -> Getting data from stack

* In push operation data is never stored where Stack pointer(SP) is pointing.
  when push operation internally stack pointer increments for eg if 100 stackpointing address push then sp points towards 104.otherwise data will be overwritten.if agin push 1t 104 sp will be pointing at 108 and then data is being inserted.

* Pop is getting data
  if sp pointing at 108 and do pop first processor will read the data from sp is pointing 
  Then decrement pointer by 4
  once again doing at 104 sp first processor will get data and then decrements by 4.

1.pop operation processor will get the data from sp is pointed.
2.Then decrements pointer by processor for 4 locations

size of stackpointer is 4 bytes thats why 4 bytes increment and decrement.
similarly if it was 8 byte then it would be increment and decrement by 8.


Types of stacks
---------------
. upgrading stack
. downgrading stack

if we take downgrading stack,then when we pus operation sp will decrease and in pop operation it in increment

"ARM7 SP is downgrading in nature"


? In which case processor will do stack pointer
ans> 1. function call
     2. Interupts


LINK REGISTER R14
------------------
This register is used to store the function return address when interupt is triggered.
Register opertaion is faster rather than storing in stack RAM.
processor storing address to stack take time due to its outside.
But register is insside processor so faster
register operation is faster compared to stack RAM.

When interupt triggered LR will be storing the next address then after that interupt call the LR wll be having the continuation address.

When interupt generated next address stored in LR interupt execution time is lower compared to processor stack way.

Real time eg:
car air bag deploy processor stack method take time in case of performing push and pop operation and processor ISR action take time
but LR method is quick
ARM processor are popular due to this other processor uses stack method.
This is one main reason make ARM faster .switching from ISR is faster.


PROGRAM COUNTER 
---------------
PC is always points to the read instrcution address to be executed
after reset PC value become zero in all controllers and processors
after reset stack pointer maynot be zero.
PC always face tp program memory
in Microcontroller PC always point to program memory(flash memory)
program memory where program is always stored.

when dump a hex file to microcontroller startup code is first stored at 0 then followed by main.


.Instruction register will store the value the decode 
.That decoding processor will understand what task to perform then pass to ALU where execution starts
.after decoding and before execution program counter will point to next instruction.processor will not stop after decoding processor will check where PC pointing and starts fetching
.after decoding ALU understand what to do after decoding PC incremented
.like afer 12 then 16 There is no program fetching processor will not know that there is nothing in it.It is a 'no operation'.In processor '0' is reserved for 'no operation'
again it wil increment PC and check the instruction it will keep on incrementing
.program abc.c then program is converted to .hex file .that hex file values are dumbed into flash memory values will be there in flash memory that each value symbolizes each instructions
.processor will check for an instruction till the execution resatrts from 0.


Current program status register(CPSR)
------------------------------------
.this register is common to all the modes
.This regsiter will hold the complete info of the current mode like 
  flag status,mode info,state info,interupt etc..

if cpsr currently in USR mode and an interupt had occured then the cpsr will show interupt accordingly if irq or fiq


     flags           status                extension            control
<----------------><----------------><---------------------><-------------->
31  30  29  28                                             7  6  5  4     0
N   Z   C   V                                              I  F  T    mode 
{conditional                                               ^  ^        ^  processor mode  
  flags}                                              interupt mode
                                                                  T-THUMB 
V- overflow flag
C-carry flag
Z-zero flag
N-negative flag

$ first modes:- 5 bits which mode program is executing processor 0-4


Abort mode      ABT      10111         0x17
Fast interupt   FIQ      10001         0x11
IRQ             IRQ      10010         0x12
supervisor      SV       10011         0x13
system          SYS      11111         0x1F
undefined       UND      11011         0x1B
User ode        USR      10000         0x10


In RAM only few address are alloted for each stack
processor will always check CPSR in which mode it is executing the code
As like the each stack is choosen on CPSR
previous mode informatin are stored to SPSR register
so it would return and processor will understand in which mode it should execute.

processor will use SPSR register to store info of previous mode(context of previous mode)

all 32 bit is stored from CPSR to SPSR(Saved program status register)

$ T bit:- 5th bit
1-processor is in the Thumb state
0-processor is in the ARM state

in ARM processor after reset ARM state and supervisor mode(default mode after reset)startup code executed
  
$ 6th bit FIQ
   1-FIQ masked/disabled
   0-enabled

& 7th bit IRQ
   1-IRQ disable
   0-enabled

& Overflow flag(v)28bit
   check any number with 0 it became 1

& carryflag(c) 31bit
   when there is carry from MSG bit

& Negative flag(N)
   in arithmetic operation the 31st bit of the result become 1,then negative flag will set

& Zero flag(z)
   when the result of arithmetic operation is zero then zero flag become 1
